location integration;
use system.io;

// Main program
start:function {

	print("Fibonacci series (first 30 terms):");
	fibonacci(30);
	
	print(" ");
	print("Factorial of numbers from 1 to 12: ");
	factorial_table(1, 12);
	
	print(" ");
	print("GCD Table");
	gcd_table(2, 17);

}

// Prints the first n terms of the Fibonacci series, starting at 0 and 1
fibonacci:function n:int {
	a0:int = 0;
	a1:int = 1;
	if n > 0 then {print(a0);}
	if n > 1 then {print(a1);}
	if n > 2 then {fibonacci_wrap(n - 2, a0, a1);}
}

// This function is wrapped by fibonacci to recursively compute the
// term of the Fibonacci series whose predecessors are a0 and a1
fibonacci_wrap:function n:int, a0:int, a1:int {
	if n > 0 then {
		a2:int = a0 + a1;
		print(a2);
		fibonacci_wrap(n - 1, a1, a2);
	}
}

// Prints factorials of integers in the range [lower, upper]
factorial_table:function lower:int, upper:int {
	i:int = lower;
	while i <= upper loop {
		print(factorial(i));
		i = i + 1;
	}
}

// Returns the factorial of n
factorial:function n:int -> retval:int {
	if n <= 0 then {
		retval = 1;
	} else {
		retval = n * factorial(n - 1);
	}
}

// Prints a table of greatest common divisors
// between integers in the range [lower, upper]
gcd_table:function lower:int, upper:int {
	i:int;
	j:int;
	i = lower;
	while i <= upper loop {
		j = i;
		while j < upper loop {
			print("The gcd between these integers is: ");
			print(i);
			print(j);
			print(gcd(i, j));
			j = j + 1;
		}
		i = i + 1;
	}
}

// Returns the the greatest common divisor of a and b
gcd:function a:int, b:int -> x:int {
	c:int;
	d:int;
	{c, d} = gcd_wrap(a, b);
	x = a * c + b * d;
}

// This function is a recursive implementation of the
// Extended Euclidean algorithm that is wrapped by gcd
// to find the greatest common divisor of a and b
gcd_wrap:function a:int, b:int -> c:int, d:int {
	if a % b == 0 then {
		c = 0;
		d = 1;
	} else {
		x:int;
		y:int;
		{x, y} = gcd_wrap(b, a % b);
		c = y;
		d = x - y * (a / b);
	}
}
